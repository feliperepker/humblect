// <auto-generated />
using ExternaAGVAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExternaAGVAPI.Migrations
{
    [DbContext(typeof(ExternalAgvContext))]
    partial class ExternalAgvContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExternaAGVAPI.Models.ExternalAgv", b =>
                {
                    b.Property<int>("index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("antLat")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("antLong")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("antQuality")
                        .HasColumnType("int");

                    b.Property<int>("antSvs")
                        .HasColumnType("int");

                    b.Property<bool>("autonomousOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("distFromLastPoint")
                        .HasColumnType("float");

                    b.Property<float>("distPointToPoint")
                        .HasColumnType("float");

                    b.Property<float>("distToNextPoint")
                        .HasColumnType("float");

                    b.Property<int>("dropPoint")
                        .HasColumnType("int");

                    b.Property<bool>("endRoute")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("lastOnStraight")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("lastSequence")
                        .HasColumnType("int");

                    b.Property<float>("lastVelocity")
                        .HasColumnType("float");

                    b.Property<bool>("lidarForceUpdate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("lidarLocOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("lidarPoseQuality")
                        .HasColumnType("int");

                    b.Property<float>("lidarPoseX")
                        .HasColumnType("float");

                    b.Property<float>("lidarPoseY")
                        .HasColumnType("float");

                    b.Property<bool>("lidarSafety")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("lidarStartLoc")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("lidarWarn")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("lidarYaw")
                        .HasColumnType("float");

                    b.Property<bool>("modeIndoorOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("modeOutdoorOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("navAngle")
                        .HasColumnType("float");

                    b.Property<bool>("nextOnStraight")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("nextSequence")
                        .HasColumnType("int");

                    b.Property<float>("nextVelocity")
                        .HasColumnType("float");

                    b.Property<bool>("outdoorPathMissed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("outdoorPointMissed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("outdoorVelSafety")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("pathDeviation")
                        .HasColumnType("float");

                    b.Property<int>("pickUpPoint")
                        .HasColumnType("int");

                    b.Property<int>("route1Length")
                        .HasColumnType("int");

                    b.Property<bool>("scannerSafety")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("scannerWarn")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stopPointDrop")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stopPointPickup")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("tractionVelocity")
                        .HasColumnType("float");

                    b.Property<bool>("ultrasoundSafety")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("index");

                    b.ToTable("tb_externalagv");
                });

            modelBuilder.Entity("ExternaAGVAPI.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("tb_users");
                });
#pragma warning restore 612, 618
        }
    }
}
